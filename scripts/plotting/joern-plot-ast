#!/usr/bin/env python3

import pygraphviz as pgv
from octopus.server.DBInterface import DBInterface

from joern.shelltool.JoernTool import JoernTool
from octopus.shelltool.ResultProcessor import BaseResultProcessor

DESCRIPTION = """Retrieve the AST rooted at the node with the given
id. The default output format is graphviz's 'dot'.
"""

class NodeResult(BaseResultProcessor):
    def getId(self):
        return self.result['id']
    def getNodeProperties(self):
        props = self.properties()
        props['id'] = self.getId()
        return props
    def getPlotProperties(self):
        props = {
            "shape" : "rectangle"
        }
        if self.value(self.result,'isCFGNode') == "True":
            props['style'] = 'filled'
            props['fillcolor'] = 'lightcyan'
        return props

class EdgeResult(BaseResultProcessor):
    def getDest(self):
        return self.result['outV']
    def getSrc(self):
        return self.result['inV']
    def getKey(self):
        return self.result['id']
    def getLabel(self):
        return self.result['label']
    def getPlotProperties(self):
        return {}

class AST(JoernTool):
    def __init__(self):
        JoernTool.__init__(self, DESCRIPTION)

        self.argParser.add_argument('-a', '--attributes',
                                    nargs='+', type=str,
                                    help="""Attributes shown in each node.""",
                                    default=[])
        self.argParser.add_argument('-P','--id-property',action='store_true', default=False,
                                    help="use functionId property value to identify function")
        self.argParser.add_argument('-k','--show-keys',action='store_true', default=False,
                                    help="show both property keys and values instead of just values")

    # @Override
    def processLine(self, line):
        nodes = self._getNodes(int(line))
        edges = self._getEdges(int(line))

        G = pgv.AGraph(directed=True, strict=False)
        self._addNodes(G, nodes)
        self._addEdges(G, edges)

        self._outputGraph(G, line)

    def streamStart(self):
        self.dbInterface = DBInterface()
        self.dbInterface.connectToDatabase(self.args.project)

    def _addNodes(self, G, nodes):
        for v in nodes:
            nr = NodeResult(v)
            plotproperties = nr.getPlotProperties()
            plotproperties['label'] = self._createNodeLabel(nr.getNodeProperties())
            G.add_node(nr.getId(), **plotproperties)

    def _addEdges(self, G, edges):
        for e in edges:
            er = EdgeResult(e)
            plotproperties = er.getPlotProperties()
            G.add_edge(er.getDest(),er.getSrc(),er.getKey(),**plotproperties)

    def _createNodeLabel(self, nodeProperties):
        labels = []
        if self.args.attributes == []:
            attrs = nodeProperties.keys()
        else:
            attrs = self.args.attributes
        for attribute in attrs:
            try:
                if self.args.show_keys:
                    lab = attribute+":"
                else:
                    lab = ""
                lab += str(nodeProperties[attribute])
                labels.append(lab)
            except KeyError:
                pass
        labels = filter(None, labels)
        return '\n'.join(labels)

    def _outputGraph(self, G, identifier):
        ENDMARKER = '//###'
        self.output('//' + identifier + '\n')
        self.output(str(G) + '\n')
        self.output(ENDMARKER + '\n')

    def _getStartNode(self,functionId):
        if self.args.id_property:
            startnode = """g.V().has('functionId','{}').has('type','FunctionDef')""".format(functionId)
        else:
            startnode = """g.V({}).out('IS_FUNCTION_OF_AST')""".format(functionId)
        return startnode

    def _getNodes(self, functionId):
        query = """{}
            .repeat(outE('IS_AST_PARENT').subgraph('ast').inV().simplePath())
            .cap('ast').next().traversal().V()
            """.format(self._getStartNode(functionId))
        results= self._runGremlinQuery(query)
        return results

    def _getEdges(self, functionId):
        query = """
            {}
            .repeat(outE('IS_AST_PARENT').subgraph('ast').inV().simplePath())
            .cap('ast').next().traversal().E()
            """.format(self._getStartNode(functionId))
        results= self._runGremlinQuery(query)
        return results


if __name__ == '__main__':
    tool = AST()
    tool.run()
