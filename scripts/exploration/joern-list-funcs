#!/usr/bin/env python3
from octopus.server.DBInterface import DBInterface
from octopus.shelltool.CmdLineTool import CmdLineTool

DESCRIPTION = """Create a list of all functions of the code base. The
first field is the function's name, the second field is the id of the
corresponding node in the database, and the third is the file it is
contained in"""


class ListFuncs(CmdLineTool):
    def __init__(self, DESCRIPTION):
        CmdLineTool.__init__(self, DESCRIPTION)

        self.argParser.add_argument('project')
        self.argParser.add_argument('-p', '--pattern',
                                    help="emit only function that match this pattern",
                                    action='store', type=str,
                                    default=None)

    def _runImpl(self):
        self.dbInterface = DBInterface()
        self.dbInterface.connectToDatabase(self.args.project)

        if self.args.pattern:
            query = "g.V().has('type', 'Function').has('code', textRegex('{}')).as('func').functionToFile().as(" \
                    "'file').select('func', 'file')".format(
                self.args.pattern)
        else:
            query = "g.V().has('type', 'Function').as('func').functionToFile().as('file').select('func', " \
                    "'file')".format(
                self.args.pattern)

        res = self.dbInterface.runGremlinQuery(query)
        for x in res:
            functionId = x['func']['id']
            functionName = x['func']['properties']['code'][0]['value']
            filepath = x['file']['properties']['code'][0]['value']
            print(','.join([str(functionId), functionName, filepath]))


if __name__ == '__main__':
    tool = ListFuncs(DESCRIPTION)
    tool.run()
