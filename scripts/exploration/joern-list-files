#!/usr/bin/env python3

from octopus.shelltool.ChunkStartTool import ChunkStartTool
import fnmatch
import re

DESCRIPTION = """Create a list of all files of the code base. The
first field is the file's path, the second field is the id of the
corresponding node in the database."""

class ListFiles(ChunkStartTool):
      
      def __init__(self, DESCRIPTION):
            ChunkStartTool.__init__(self, DESCRIPTION)
        
            self.argParser.add_argument('-p', '--pattern',
                                        action = 'store', type=str,
                                        default ="*")

      def _constructIdQuery(self):
            # Translate glob pattern to regex
            fnregex = fnmatch.translate(self.args.pattern)
            # Translate Python generated regex to something that Groovy can understand
            fnregex = re.sub(r'\\Z.*$','',fnregex)
            return """
            g.V.has(NODE_TYPE, TYPE_FILE)
     	    .has(NODE_CODE, textRegex('%s'))
     	    .id
            """ % (fnregex)

      def _constructQueryForChunk(self, chunk):
            return """idListToNodes(%s).map{ it.code + "\t" + it.id}""" % (chunk)

      def _handleChunkResult(self, res, chunk):
            for x in res:
                  print(x)


if __name__ == '__main__':
      tool = ListFiles(DESCRIPTION)
      tool.run()
   
